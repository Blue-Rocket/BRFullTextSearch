/*------------------------------------------------------------------------------
* Copyright (C) 2003-2006 Ben van Klinken and the CLucene Team
* 
* Distributable under the terms of either the Apache License (Version 2.0) or 
* the GNU Lesser General Public License, as specified in the COPYING file.
------------------------------------------------------------------------------*/
#ifndef _lucene_queryParser_CharStream_
#define _lucene_queryParser_CharStream_

CL_NS_DEF(queryParser)

/**
 * This interface describes a character stream that maintains line and
 * column number positions of the characters.  It also has the capability
 * to backup the stream to some extent.  An implementation of this
 * interface is used in the TokenManager implementation generated by
 * JavaCCParser.
 *
 * All the methods except backup can be implemented in any fashion. backup
 * needs to be implemented correctly for the correct operation of the lexer.
 * Rest of the methods are all used to get information like line number,
 * column number and the String that constitutes a token and are not used
 * by the lexer. Hence their implementation won't affect the generated lexer's
 * operation.
 */
class CharStream :LUCENE_BASE {
public:
	/**
	* Returns the next character from the selected input.  The method
	* of selecting the input is the responsibility of the class
	* implementing this interface.  Can throw any java.io.IOException.
	*/
	virtual TCHAR readChar() = 0;

	/**
	* Returns the column position of the character last read.
	* @deprecated 
	* @see #getEndColumn
	*/
	virtual int32_t getColumn() const = 0;

	/**
	* Returns the line number of the character last read.
	* @deprecated 
	* @see #getEndLine
	*/
	virtual int32_t getLine() const = 0;

	/**
	* Returns the column number of the last character for current token (being
	* matched after the last call to BeginTOken).
	*/
	virtual int32_t getEndColumn() const = 0;

	/**
	* Returns the line number of the last character for current token (being
	* matched after the last call to BeginTOken).
	*/
	virtual int32_t getEndLine() const = 0;

	/**
	* Returns the column number of the first character for current token (being
	* matched after the last call to BeginTOken).
	*/
	virtual int32_t getBeginColumn() const = 0;

	/**
	* Returns the line number of the first character for current token (being
	* matched after the last call to BeginTOken).
	*/
	virtual int32_t getBeginLine() const = 0;

	/**
	* Backs up the input stream by amount steps. Lexer calls this method if it
	* had already read some characters, but could not use them to match a
	* (longer) token. So, they will be used again as the prefix of the next
	* token and it is the implemetation's responsibility to do this right.
	*/
	virtual void backup(const int32_t amount) = 0;

	/**
	* Returns the next character that marks the beginning of the next token.
	* All characters must remain in the buffer between two successive calls
	* to this method to implement backup correctly.
	*/
	virtual TCHAR BeginToken() = 0;

	/**
	* Returns a string made up of characters from the marked token beginning 
	* to the current buffer position. Implementations have the choice of returning
	* anything that they want to. For example, for efficiency, one might decide
	* to just return null, which is a valid implementation.
	*/
	virtual TCHAR* GetImage() = 0;

	/**
	* Returns an array of characters that make up the suffix of length 'len' for
	* the currently matched token. This is used to build up the matched string
	* for use in actions in the case of MORE. A simple and inefficient
	* implementation of this is as follows :
	*
	*   {
	*      String t = GetImage();
	*      return t.substring(t.length() - len, t.length()).toCharArray();
	*   }
	*/
	virtual TCHAR* GetSuffix(const int32_t len) = 0;

	/**
	* The lexer calls this function to indicate that it is done with the stream
	* and hence implementations can free any resources held by this class.
	* Again, the body of this function can be just empty and it will not
	* affect the lexer's operation.
	*/
	virtual void Done() = 0;

	//CharStream(){};
	//virtual ~CharStream(){};
};
CL_NS_END
#endif
